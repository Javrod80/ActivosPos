// Importa la librer칤a MQTT para conectar y manejar mensajes del broker
const mqtt = require('mqtt');
// Importa la funci칩n que infiere en qu칠 v칤a est치 el tracker, seg칰n se침ales y desv칤os
const { inferTrackLocation } = require('../utils/AgujaProcessor.js');
// Conexi칩n al broker MQTT en localhost, puerto 1883
const client = mqtt.connect('mqtt://localhost:1883');
// Evento cuando la conexi칩n con el broker MQTT se establece correctamente
client.on('connect', () => {
  console.log('游닌 Listener connected');
    // Se suscribe al topic 'simulation/tracker' para recibir mensajes simulados de trackers
  client.subscribe('simulation/tracker');
});
// Evento que se dispara al recibir un mensaje del topic suscrito
client.on('message', (topic, message) => {
  const data = JSON.parse(message.toString());
 // Extrae los campos relevantes del mensaje
  const {
    trackerId,
    lastSwitchPassed, // 칔ltimo desv칤o pasado por el tracker
    switchStates,// Estados de los desv칤os (1 a 5) y su respectiva v칤a o acci칩n
    signalMap, // Mapa de se침ales para diferentes v칤as
  } = data;
  
  // Llama a la funci칩n que infiere la v칤a probable del tracker con base en la informaci칩n recibida
  const result = inferTrackLocation(signalMap, switchStates, lastSwitchPassed);

  console.log(`游늸 Tracker ${trackerId} probable position: v칤a ${result}`);
});
